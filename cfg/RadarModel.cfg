#!/usr/bin/env python
PACKAGE = "radarays_ros"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

M_PI = 3.14159265359

# model settings
gen.add("z_offset", double_t, 0, "Z offset of sensor origin", 0.0, -2.0, 2.0)
gen.add("range_min", double_t, 0, "Minimum range", 0.0, 0.0, 10.0)
gen.add("range_max", double_t, 0, "Maximum range", 600.0, 0.0, 1000.0)
gen.add("beam_width",  double_t, 0, "Beam Width (Degree)", 8.0, 0.0, 90.0)
gen.add("resolution",  double_t, 0, "Resolution of a range measurement", 0.0438, 0.0, 3.0)
gen.add("n_cells",     int_t,    0, "Number of ranges measurements per beam", 3424,  1, 10000)

# simulation settings
gen.add("n_samples",        int_t,    0, "Samples per beam", 10,  1, 10000)
beam_dist_enum = gen.enum([ 
                        gen.const("beam_sample_dist_d1_uniform",  int_t, 0, "D_1: uniform"),
                        gen.const("beam_sample_dist_d2_uniform",  int_t, 1, "D_2: uniform"),
                        gen.const("beam_sample_dist_d3_normal",   int_t, 2, "D_3: normal"),
                        gen.const("beam_sample_dist_d4_normal",   int_t, 3, "D_4: normal")],
                     "Beam Sample Distribution")
gen.add("beam_sample_dist", int_t, 0, "Beam Sample Distribution", 2, 0, 3, edit_method=beam_dist_enum)
gen.add("beam_sample_dist_normal_p_in_cone", double_t, 0, "Probability that sample is in cone", 0.8, 0.0, 0.999)

gen.add("n_reflections",    int_t,    0, "Maximum Reflections per sample", 4,  0, 20)

gen.add("energy_min",     double_t,    0, "Minimum Energy (%)", 0.0,  0.0, 1.0)
gen.add("energy_max",     double_t,    0, "Maximum Energy (%)", 0.5,  0.0, 1.0)
gen.add("signal_max",     double_t,    0, "Max Signal", 120.0, 0.0, 255.0)

# Noise parameters

## Signal Noise
signal_denoising_enum = gen.enum([
                        gen.const("signal_denoising_none",               int_t, 0, "none"),
                        gen.const("signal_denoising_triangular",         int_t, 1, "triangular"),
                        gen.const("signal_denoising_gaussian",           int_t, 2, "gaussian"),
                        gen.const("signal_denoising_maxwell_boltzmann",  int_t, 3, "maxwell_boltzmann")],
                     "Denoising of samples and signal recording noise")
gen.add("signal_denoising",   int_t, 0, "Signal denoising", 1, 0, 3, edit_method=signal_denoising_enum)

gen.add("signal_denoising_triangular_width", int_t, 0, "Width of kernel", 50, 1, 200)
gen.add("signal_denoising_triangular_mode", double_t, 0, "Mode of kernel", 0.35, 0.0, 1.0)
gen.add("signal_denoising_gaussian_width", int_t, 0, "Width of kernel", 50, 1, 200)
gen.add("signal_denoising_gaussian_mode", double_t, 0, "Mode of kernel", 0.5, 0.0, 1.0)
gen.add("signal_denoising_mb_width", int_t, 0, "Width of kernel", 50, 1, 200)
gen.add("signal_denoising_mb_mode", double_t, 0, "Mode of kernel", 0.4, 0.0, 1.0)

## Ambient Noise
ambient_noise_enum = gen.enum([
                        gen.const("ambient_noise_none",               int_t, 0, "ambient_noise_none"),
                        gen.const("ambient_noise_uniform",         int_t, 1, "ambient_noise_uniform"),
                        gen.const("ambient_noise_perlin",           int_t, 2, "ambient_noise_perlin")],
                     "Ambient noise")

gen.add("ambient_noise", int_t, 0,  "Ambient noise", 2, 0, 2, edit_method=ambient_noise_enum)
gen.add("ambient_noise_at_signal_0",   double_t,   0, "noise strength for when no other signal was recorded",  0.3, 0.0, 1.0)
gen.add("ambient_noise_at_signal_1",   double_t,   0, "noise strength when other signal was recorded",  0.03, 0.0, 1.0)
gen.add("ambient_noise_energy_max", double_t, 0, "E = (max - min) * e^(loss * x) + min", 0.5, 0.0, 1.0)
gen.add("ambient_noise_energy_min", double_t, 0, "E = (max - min) * e^(loss * x) + min", 0.1, 0.0, 1.0)
gen.add("ambient_noise_energy_loss", double_t, 0, "E = (max - min) * e^(loss * x) + min", 0.05, 0.0, 1.0)

gen.add("ambient_noise_uniform_max",   double_t,   0, "Maximum limit for uniform ambient noise",  0.15, 0.0, 1.0)
gen.add("ambient_noise_perlin_scale_low", double_t, 0, "Scale for low frequence perlin", 0.05, 0.0, 1.0)
gen.add("ambient_noise_perlin_scale_high", double_t, 0, "Scale for high frequence perlin", 0.2, 0.0, 1.0)
gen.add("ambient_noise_perlin_p_low", double_t, 0, "Percentage of low frequence perlin over high frequence perlin", 0.9, 0.0, 1.0)


# gen.add("ambient_noise_perlin",   double_t,   0, "Maximum limit for uniform ambient noise",  0.15, 0.0, 1.0)

# Particle Noise
# TODO: make enum
# gen.add("particle_noise", bool_t, 0, "Particle noise enabled", True)
# gen.add("particle_noise_exp_mu", double_t, 0, "Particle noise mu", 15.0, 0.0, 100.0)

# Debugging
gen.add("scroll_image",    int_t,    0, "Scroll image", 0,  0, 400)
gen.add("multipath_threshold",     double_t,    0, "Multpath threshold", 0.5,  0.0, 1.0)
gen.add("record_multi_reflection", bool_t, 0, "Record multiple reflections", True)
gen.add("record_multi_path", bool_t, 0, "Record mult path effects", False)
gen.add("include_motion", bool_t, 0, "Include motion: fetch current transform for each beam.", True)


exit(gen.generate(PACKAGE, "radar_simulator", "RadarModel"))
