#!/usr/bin/env python
PACKAGE = "radarays_ros"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

M_PI = 3.14159265359

gen.add("ray_yaw", double_t,  0, "Ray yaw angle", 0.0, -180.0, 180.0)
gen.add("n_reflections", int_t, 0, "Maximum Reflections per ray", 0,  0, 20)
gen.add("spinning", bool_t, 0, "Spinning around z axis", False)
gen.add("energy", bool_t, 0, "Transparency by energy", False)


gen.add("cone_sampling", bool_t, 0, "Enable cone sampling", False)
gen.add("cone_width", double_t,  0, "Cone width (degree)", 1.8, 0.0, 30.0)
gen.add("cone_samples", int_t, 0, "Number of cone samples", 10,  0, 1000)

cone_dist_enum = gen.enum([ gen.const("uniform",         int_t, 0, "uniform"),
                       gen.const("uniform_approx",  int_t, 1, "uniform_approx"),
                       gen.const("normal",          int_t, 2, "normal"),
                       gen.const("normal_approx",   int_t, 3, "normal_approx")],
                     "Beam Sample Distribution")
gen.add("cone_sample_dist", int_t, 0, "Cone Sample Distribution", 0, 0, 3, edit_method=cone_dist_enum)
gen.add("cone_sample_dist_normal_p_in_cone", double_t, 0, "Probability that sample is in cone", 0.95, 0.0, 0.999)



gen.add("shoot_all_directions", bool_t, 0, "360 degree shoot", False)
gen.add("yaw_increment", double_t,  0, "Cone width (degree)", 0.1, 0.0, 10.0)


exit(gen.generate(PACKAGE, "ray_reflection_test", "RayReflection"))